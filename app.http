// Make a GET request to fetch all books from the API
GET http://localhost:3001/books
###
// Make a POST request to create a new book in the API
// The URL specifies the endpoint for creating a new book
// The endpoint is http://localhost:3001/books_post
// The Content-Type header specifies that the request body contains JSON data
// The request body should contain a JSON object with the following properties:
// - book_id: an integer representing the ID of the book
// - title: a string representing the title of the book
// - author_id: an integer representing the ID of the author of the book
// - genre_id: an integer representing the ID of the genre of the book
// - price: a number representing the price of the book
// - publish_date: a string representing the date the book was published in the format 'YYYY-MM-DD'
// The response will be a JSON object containing the ID of the newly created book, or an error message if the book could not be created
POST http://localhost:3001/books_post
// Set the Content-Type header to specify that the request body contains JSON data
Content-Type: application/json
###
{

  "book_id":1502,
  "title": "The Great Harry Porter",
  "author_id": 1000,
  "genre_id": 2000,
  "price": 15.99,
  "publish_date": "1945-04-10"
}

# Using POST data In Postman.
###
# This is an example of a PUT request to update a book in the API.
# The URL path is constructed by appending the book ID to the end of the endpoint.
# For example, a book with ID 1502 will be updated.
# The request body should contain a JSON object with the updated properties of the book.
# The response will be a JSON object containing the ID of the updated book, or an error message if the book could not be updated.
PUT http://localhost:3001/books_update/1502
###

# This is an example of a DELETE request to delete a book from the API.
# The URL path is constructed by appending the book ID to the end of the endpoint.
# For example, a book with ID 1503 will be deleted.
# The response will be a JSON object containing the ID of the deleted book, or an error message if the book could not be deleted.
PUT http://localhost:3001/books_delete/1503
###
// Make a GET request to fetch a specific book from the API by its ID
// Specify the ID in the URL path after the '/books/'
// Example: /books/50 will fetch the book with ID 50
GET http://localhost:3001/books/1500
###
// Make a GET request to fetch all books from the API
// The URL path is constructed by appending the title of the book to the end of the endpoint.
// For example, a title of 'The Great Gatsby' will fetch all books with that title.
// The response will be a JSON array containing the books with the specified title, or an error message if no books are found with that title.
GET http://localhost:3001/booksTitle
###
// Make a GET request to fetch all authors from the API
GET http://localhost:3001/authors
###
// Make a GET request to fetch a specific author from the API by its ID
// Specify the ID in the URL path after the '/authors/'
// Example: /authors/300 will fetch the author with ID 300
GET http://localhost:3001/authors/300
###
# Make a GET request to fetch a specific author's country from the API by their author ID
# Specify the author ID in the URL path after the '/author/'
# Example: /author/50 will fetch the country of the author with ID 50
# The response will be a JSON object containing the author's country, or an error message if the author is not found
GET http://localhost:3001/author/Country
###
// Make a GET request to fetch all customers from the API
GET http://localhost:3001/customers
###
// Make a GET request to fetch a specific customer from the API by their ID
// Specify the ID in the URL path after the '/customers/'
// Example: /customers/20 will fetch the customer with ID 20
GET http://localhost:3001/customers/20
###
# This is an example of a GET request to fetch a specific customer by their phone number.
# The URL path is constructed by appending the phone number to the end of the endpoint.
# The phone number is expected to be in E.164 format, which is a standard format for representing phone numbers.
# For example, a phone number in E.164 format for the United States would be "+15555555555".
# The response will be a JSON object containing the customer's data, or an error message if the customer is not found.
GET http://localhost:3001/customer/Phone
###
// Make a GET request to fetch all orders from the API
GET http://localhost:3001/orders
###
// Make a GET request to fetch a specific order from the API by its ID
// Specify the ID in the URL path after the '/orders/'
// Example: /orders/700 will fetch the order with ID 700
GET http://localhost:3001/orders/700
###
// This is an example of a GET request to fetch all orders based on a specific date.
// The URL path is constructed by appending the date to the end of the endpoint.
// The date should be in the format 'YYYY-MM-DD'. 
// For example, a date of '2021-01-01' will fetch all orders on January 1, 2021.
// The response will be a JSON array containing the orders for the specified date, or an error message if no orders are found for that date.
GET http://localhost:3001/ordersDate
###
